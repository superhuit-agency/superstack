import { Metadata } from 'next';
import { draftMode, cookies } from 'next/headers';
import { notFound, permanentRedirect, redirect } from 'next/navigation';

import { Templates } from '@/components/global/Templates';
import { PreviewToolbar } from '@/components/molecules/PreviewToolbar';
import { useCanonical as getCanonicalUrl } from '@/hooks/use-canonical';
import {
	getAllURIs,
	getAuthToken,
	getNodeByURI,
	getRedirection,
	getWpUriFromNextPath,
} from '@/lib';

// see https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config
export const revalidate = 3600; // revalidate at most every hour
// üëáüèΩ equivalent to `getStaticProps()` in the `pages` directory
// export const dynamic = 'error';
// export const dynamicParams = true; // Needed to dynamically render pages for params not generated by `generateStaticParams`

// Generate static paths for build time
export async function generateStaticParams() {
	const allURIs = await getAllURIs();

	return allURIs;
}

// Generate page metadata
export async function generateMetadata({
	params,
}: {
	params: { uri: string[] };
}): Promise<Metadata> {
	const uri = getWpUriFromNextPath(params.uri ?? []);

	let auth = {};

	const languageCode = 'FR'; // TODO: get from next i18n

	const baseUrl =
		process.env.NEXT_URL ??
		process.env.VERCEL_URL ??
		'http://localhost:3000';

	const node = await getNodeByURI(
		uri,
		false,
		auth,
		languageCode,
		false,
		false
	);

	const imageSEO =
		node?.seo?.opengraphImage?.src ??
		node?.siteSEO?.openGraph?.defaultImage?.src ??
		'';

	const canonical = getCanonicalUrl(node);

	// Fix SEO url for homepage
	const urlSEO = node?.seo?.opengraphUrl?.startsWith('https')
		? node?.language
			? `/${node?.language.code.toLowerCase()}/`
			: '/'
		: node?.seo?.opengraphUrl;

	return {
		metadataBase: new URL(baseUrl),
		title: node?.seo?.title ?? node?.title,
		description:
			node?.seo?.opengraphDescription ?? node?.seo?.metaDesc ?? '',
		// Canonical
		alternates: {
			canonical: canonical,
			...node?.translations?.reduce(
				(acc: Record<string, string>, t: any) => {
					if (!t.language || !t.language.locale || !t.language.code)
						return acc;

					return {
						...acc,
						[t.language.locale]:
							(node?.baseUrl || '') +
							(t.uri === '/'
								? `/${t.language.code.toLowerCase()}/`
								: t.uri),
					};
				},
				{}
			),
		},
		// Open Graph
		openGraph: {
			title: node?.seo?.title ?? node?.title,
			description:
				node?.seo?.opengraphDescription ?? node?.seo?.metaDesc ?? '',
			siteName: node?.siteSEO?.schema?.siteName,
			images: [
				{
					url: imageSEO,
					alt: node?.seo?.title,
				},
			],
			url: urlSEO,
		},
		// Socials
		twitter: {
			title: node?.seo?.twitterTitle ?? node?.seo?.title,
			description:
				node?.seo?.twitterDescription ??
				node?.seo?.opengraphDescription,
			images: [
				{
					url: node?.seo?.twitterImage?.src ?? imageSEO,
					alt: node?.seo?.twitterImage?.alt ?? node?.seo?.title,
				},
			],
			card:
				node?.siteSEO?.social?.twitter?.cardType ??
				'summary_large_image',
			creator: node?.siteSEO?.social?.twitter?.username,
		},
		// Robots
		robots: {
			index: node?.seo?.metaRobotsNoindex === 'index',
			follow: node?.seo?.metaRobotsNofollow === 'follow',
		},
	};
}

export default async function Page({ params }: { params: { uri: string[] } }) {
	const { isEnabled: isDraftModeEnable } = draftMode();

	let isDraft = false,
		token = '';

	const uri = getWpUriFromNextPath(
		params.uri ?? []
		// params.lang,
		// defaultLocale
	);
	let auth: { authToken?: string } = {};

	const languageCode = 'FR'; // TODO: get from next i18n

	if (isDraftModeEnable) {
		// We are now in dynamic rendering

		const cookieStore = cookies();

		token = cookieStore.get('token')?.value ?? '';
		isDraft = cookieStore.get('preview-draft')?.value === 'true';

		if (token) {
			// Get a fresh auth token
			auth = {
				authToken: await getAuthToken(token),
			};
		}

		if (!auth.authToken) {
			// Exit preview mode if refresh token is invalid
			redirect(`/api/preview-exit?redirect=${uri}`);
		}
	}

	// Redirect if the URI is a redirection
	const redirection = await getRedirection(uri);
	if (redirection) {
		if (redirection.isPermanent) {
			permanentRedirect(redirection.destination);
		} else {
			redirect(redirection.destination);
		}
	}

	const node = await getNodeByURI(
		uri,
		isDraftModeEnable,
		auth,
		languageCode,
		isDraft
	);

	if (!node || !node?.uri) {
		return notFound();
	}

	return (
		<>
			<Templates node={node} contentType={node?.__typename ?? 'error'} />

			{isDraftModeEnable ? (
				<PreviewToolbar isDraft={isDraft} editLink={node?.editLink} />
			) : null}
		</>
	);
}
