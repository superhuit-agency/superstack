import { gql } from '@/utils';

import block from './block.json';

// Export block slug for identification
export const slug = block.slug;

/**
 * Dynamic data formatter/parser.
 *
 * @param {Graphql{{ pascalCase blockTitle }}Fields}     data      Data from GraphQL query response
 * @param {boolean} isEditor  Wheter the formatter function is executed within the WP block editor.
 * @returns             The transformed/formatted/parsed data
 */
export const formatter = (data: Graphql{{ pascalCase blockTitle }}Fields, isEditor = false) => {
	return data; // Format data as you need
};

/**
 * GraphQL data fetching.
 * Should return the final props needed for the block
 *
 * @param {FetchApiFuncType} fetcher    The context based function to request the GraphQl endpoint.
 *                                Arguments: - {string} query, [{any} variables].
 * @param {{{ pascalCase blockTitle }}Attributes}      attributes The attributes of the block
 * @param {boolean}  isEditor   Wheter the context is within the WP block editor.
 */
export const getData = async (
	fetcher: FetchApiFuncType,
	attributes: {{ pascalCase blockTitle }}Attributes | null = null,
	isEditor: boolean = false
): Promise<{{ pascalCase blockTitle }}Data> => {
	// declare the GraphQL query string.
	const query = gql`
		query {{camelCase blockTitle}}Query {
			data: posts {
				nodes {
					id: databaseId
					title(format: RENDERED)
					uri
				}
			}
		}
	`;

	// construct the query variables (maybe based on the `attributes` argument)
	const variables = {};

	// retrieves the data
	const data = await fetcher(query, { variables });

	return formatter(data, isEditor);
};

/**
 * GraphQL fragment that can be used by another block's query.
 */
// export const fragment = gql`
// fragment {{camelCase blockTitle}}Fragment on Post {
// 	id: databaseId
// 	title(format: RENDERED)
// 	uri
// }`;
